pollutantmean(directory, pollutant)
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean(directory, "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 70:72)
source("pollutantmean.R")
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
?data.frame
a = data.frame()
a = data.frame(id=numeric(), nobs = numeric())
a["id"][0] = 1
id = 1:332
length(id)
fullpath = paste(directory,"/",fileID,".csv", sep="")
directory = "specdata"
id = 1
n = length(id)
resDF = data.frame(id=numeric(n), nobs = numeric(n))
filenum = 1
fileID = sprintf("%03d", filenum)
fullpath = paste(directory,"/",fileID,".csv", sep="")
filedata = read.csv(fullpath)d
filedata = read.csv(fullpath)
is.na(filedata)
filedata
any(is.na(filedata))
?any
filedata["sulfate","nitrate"]
filedata[c("sulfate","nitrate")]
is.na(filedata[c("sulfate","nitrate")])
!is.na(filedata[c("sulfate","nitrate")])
colSums(!is.na(filedata[c("sulfate","nitrate")]))
is.na(filedata["sulfate"])
is.na(filedata["sulfate"]) and is.na(filedata["nitrate"])
is.na(filedata["sulfate"]) and is.na(filedata["sulfate"])
is.na(filedata["sulfate"]) && is.na(filedata["sulfate"])
is.na(filedata["sulfate"]) & is.na(filedata["sulfate"])
is.na(filedata["sulfate"]) | is.na(filedata["sulfate"])
!is.na(filedata["sulfate"]) | !is.na(filedata["sulfate"])
!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"])
sum(!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"]))
id[0]
id[1]
1:length(id)
id
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
source("complete.R")
complete("specdata", 1
)
complete("specdata", c(2, 4, 8, 10, 12))
directory = "specdata"
id = c(2, 4, 8, 10, 12)
n = length(id)
resDF = data.frame(id=numeric(n), nobs = numeric(n))
View(resDF)
View(resDF)
id[0]
id[1]
1:n
c(1:n)
a = 1:n
cnt = 1
fileID = sprintf("%03d", id[cnt])
fullpath = paste(directory,"/",fileID,".csv", sep="")
filedata = read.csv(fullpath)
nobs = sum(!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"]))
resDF["id"][cnt] = id[cnt]
resDF["nobs"][cnt] = nobs
cnt = 2
fileID = sprintf("%03d", id[cnt])
fullpath = paste(directory,"/",fileID,".csv", sep="")
filedata = read.csv(fullpath)
nobs = sum(!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"]))
resDF["id"][cnt] = id[cnt]
resDF["nobs"][cnt] = nobs
fileID = sprintf("%03d", id[cnt])
fullpath = paste(directory,"/",fileID,".csv", sep="")
filedata = read.csv(fullpath)
nobs = sum(!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"]))
resDF["id"][cnt] = id[cnt]
id[cnt]
resDF
id[cnt]
resDF$id
resDF$id[1] = 10
resDF
resDF[["id"]][cnt] = id[cnt]
resDF
source("complete.R")
complete("specdata", 1
)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
directory = "specdata"
source("complete.R")
completed = complete(directory)
completed = complete(directory)
toUse = completed["nobs"]>threshold
threshold = 3
toUse = completed["nobs"]>threshold
toUse
toUse = source["id"][completed["nobs"]>threshold]
toUse = source[["id"][completed["nobs"]>threshold]
toUse = source[[id][completed["nobs"]>threshold]
toUse = source$"id"[completed["nobs"]>threshold]
toUse = completed[["id"]][completed["nobs"]>threshold]
toUse
filenum = 1
file = sprintf("%03d", filenum)
fullpath = paste(directory,"/",file,".csv", sep="")
filedata = read.csv(fullpath)
filedata["nitrate"][!is.na(filedata["nitrate"])]
sulfate = c(sulfate, filedata["sulfate"][!is.na(filedata["sulfate"])])
nitrate = c(nitrate, filedata["nitrate"][!is.na(filedata["nitrate"])])
sulfate = numeric()
nitrate = numeric()
sulfate = c(sulfate, filedata["sulfate"][!is.na(filedata["sulfate"])])
nitrate = c(nitrate, filedata["nitrate"][!is.na(filedata["nitrate"])])
?cor
cor(sulfate,nitrate)
index = !is.na(filedata["sulfate"]) & !is.na(filedata["nitrate"])
filedata["sulfate"][index]
index = !is.na(filedata["sulfate"]) & !is.na(filedata["nitrate"])
sulfate = c(sulfate, filedata["sulfate"][index])
nitrate = c(nitrate, filedata["nitrate"][index])
cor(sulfate,nitrate)
sum(index)
sulfate = numeric()
nitrate = numeric()
index = !is.na(filedata["sulfate"]) & !is.na(filedata["nitrate"])
sulfate = c(sulfate, filedata["sulfate"][index])
nitrate = c(nitrate, filedata["nitrate"][index])
cor(sulfate,nitrate)
toUse
threshold = 1000000000
toUse = completed[["id"]][completed["nobs"]>threshold]
toUse
len(toUse)
length(toUse)
a = numeric()
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
corr("specdata",15'')
corr("specdata",150)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
directory = "specdata"
threshold = 150
corrs = numeric()
# Get the relevant files
#source("complete.R")
completed = complete(directory)
toUse = completed[["id"]][completed["nobs"]>threshold]
source("complete.R")
completed = complete(directory)
toUse = completed[["id"]][completed["nobs"]>threshold]
toUse
if(length(toUse)>0){
for(filenum in toUse){
# Read file
file = sprintf("%03d", filenum)
fullpath = paste(directory,"/",file,".csv", sep="")
filedata = read.csv(fullpath)
# Append the new data to the pollutant vectors
index = !is.na(filedata["sulfate"]) & !is.na(filedata["nitrate"])
sulfate = filedata["sulfate"][index]
nitrate = filedata["nitrate"][index]
# Return numeric vector of correlations
corrs = c(corrs,cor(sulfate,nitrate))
}
}
corrs
toUse
completed
completed["nobs"]>threshold
toUse = completed[["id"]][completed["nobs"]>threshold]
if(length(toUse)>0){
for(filenum in toUse){
# Read file
file = sprintf("%03d", filenum)
fullpath = paste(directory,"/",file,".csv", sep="")
filedata = read.csv(fullpath)
# Append the new data to the pollutant vectors
index = !is.na(filedata["sulfate"]) & !is.na(filedata["nitrate"])
sulfate = filedata["sulfate"][index]
nitrate = filedata["nitrate"][index]
# Return numeric vector of correlations
corrs = c(corrs,cor(sulfate,nitrate))
}
}
corrs
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
directory = "specdata"
id=1:10
n = length(id)
resDF = data.frame(id=numeric(n), nobs = numeric(n))
View(resDF)
View(resDF)
for(c in 1:n){print c}
for(c in 1:n){c}
for(c in 1:n){print(c)}
cnt = 1
fileID = sprintf("%03d", id[cnt])
fullpath = paste(directory,"/",fileID,".csv", sep="")
filedata = read.csv(fullpath)
!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"])
View(filedata)
View(filedata)
!is.na(filedata["sulfate"]
)
!is.na(filedata["nitrate"])
id[cnt]
id[2]
fileID = sprintf("%03d", id[cnt])
fullpath = paste(directory,"/",fileID,".csv", sep="")
filedata = read.csv(fullpath)
nobs = sum(!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"]))
resDF[["id"]][cnt] = id[cnt]
resDF[["nobs"]][cnt] = nobs
fileID
cnt = 2
fileID = sprintf("%03d", id[cnt])
fullpath = paste(directory,"/",fileID,".csv", sep="")
filedata = read.csv(fullpath)
nobs = sum(!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"]))
resDF[["id"]][cnt] = id[cnt]
resDF[["nobs"]][cnt] = nobs
fileId
fileID
nobs
id[cnt]
resDF
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
id = 28
n = length(id)
resDF = data.frame(id=numeric(n), nobs = numeric(n))
n
cnt = 1:n
cnt
fileID = sprintf("%03d", id[cnt])
fullpath = paste(directory,"/",fileID,".csv", sep="")
filedata = read.csv(fullpath)
nobs = sum(!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"]))
source("complete.R")
complete("specdata", 1)
complete("specdata", 30:25)
submit
submit()
source("submitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
install.packages("swirl"
)
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3)+c(0,10)
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
swirl()
1:20
pi:10
15:1
?´:
?´:´
?`:`
seq(1:20)
seq(1,20)
seq(0,10,by=0,5)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2), each=10)
state = "TX"
outcome = "heart attack"
# Read outcome Data
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,11]<-as.numeric(data[,11])
data[,17]<-as.numeric(data[,17])
data[,23]<-as.numeric(data[,23])
# Check that state and outcome are valid
validStates = unique(data$State)
validOutcomes = c("heart attack", "heart failure", "pneumonia")
if (!(state %in% validStates)){
stop("invalid state")
}
if (!(outcome %in% validOutcomes)){
stop("invalid outcome")
}
# Return hospital name in that state with lowest
# 30-day death rate
# Define columns to be searched
mRatesCols = list("heart attack"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia"="Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
mRates = data[[mRatesCols[[outcome]]]][data$State==state]
# Idx from mRates NOT FROM THE WHOLE DATAFRAME
bestIdx = which.min(mRates)
# Read outcome Data
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,11]<-as.numeric(data[,11])
data[,17]<-as.numeric(data[,17])
data[,23]<-as.numeric(data[,23])
# Check that state and outcome are valid
validStates = unique(data$State)
validOutcomes = c("heart attack", "heart failure", "pneumonia")
if (!(state %in% validStates)){
stop("invalid state")
}
if (!(outcome %in% validOutcomes)){
stop("invalid outcome")
}
# Return hospital name in that state with lowest
# 30-day death rate
# Define columns to be searched
mRatesCols = list("heart attack"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia"="Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
mRates = data[[mRatesCols[[outcome]]]][data$State==state]
data[[mRatesCols[[outcome]]]]
mRatesCols[[outcome]]
data[[mRatesCols[[outcome]]]]
data$mRatesCols[[outcome]]
mRatesCols[[outcome]]
thisColumn = mRatesCols[[outcome]]
mRates = data[[thisColumn]]
thisColumn
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,11]<-as.numeric(data[,11])
data[,17]<-as.numeric(data[,17])
data[,23]<-as.numeric(data[,23])
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,11]<-as.numeric(data[,11])
data[,17]<-as.numeric(data[,17])
data[,23]<-as.numeric(data[,23])
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
setwd("C:/workspace/myRCode/rprog_data_ProgAssignment3-data")
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,11]<-as.numeric(data[,11])
data[,17]<-as.numeric(data[,17])
data[,23]<-as.numeric(data[,23])
validStates = unique(data$State)
validOutcomes = c("heart attack", "heart failure", "pneumonia")
if (!(state %in% validStates)){
stop("invalid state")
}
if (!(outcome %in% validOutcomes)){
stop("invalid outcome")
}
# Return hospital name in that state with lowest
# 30-day death rate
# Define columns to be searched
mRatesCols = list("heart attack"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia"="Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
mRates = data[[mRatesCols[[outcome]]]][data$State==state]
# Idx from mRates NOT FROM THE WHOLE DATAFRAME
bestIdx = which.min(mRates)
bestIdx
theColumn = mRatesCols[[outcome]]
mRates = data[[theColumn]][data$State==state]
# Idx from mRates NOT FROM THE WHOLE DATAFRAME
bestIdx = which.min(mRates)
theColumn
best
bestVal = data$Hospital.Name[bestIdx]
bestVal
bestVal = data[[theColumn]][bestIdx]
bestVal
bestIdx = which.min(mRates)
bestVal = mRates[bestIdx]
best = data$Hospital.Name[data[[theColumn]]==bestVal]
best
bestVal
data[[theColumn]]==bestVal
data$Hospital.Name[data[[theColumn]]==bestVal]
data[[theColumn]]
bestVal = mRates[bestIdx]
bestVal
data[[theColumn]]==bestVal
idx = data[[theColumn]]==bestVal
data$Hospital.Name[[idx]]
sum(idx)
data.$Hospital.Name
data[[theColumn]]
theColumn
is.nan(data[[theColumn]])
best = data$Hospital.Name[data[[theColumn]]==bestVal& !is.nan(data[[theColumn]])]
best
data[[theColumn]]==bestVal
best = data$Hospital.Name[!is.nan(data[[theColumn]])][data[[theColumn]]==bestVal]
data$Hospital.Name[!is.nan(data[[theColumn]])]
stateData = data[data$State==state,]
bestIdx = which.min(stateData[[theColumn]])
bestIdx
bestVal = stateData$Hospital.Name[bestIdx]
bestVal
state = "TX"
outcome "heart attack"
outcome = "heart attack"
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,11]<-as.numeric(data[,11])
data[,17]<-as.numeric(data[,17])
data[,23]<-as.numeric(data[,23])
mRatesCols = list("heart attack"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia"="Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
# Check that state and outcome are valid
validStates = unique(data$State)
validOutcomes = c("heart attack", "heart failure", "pneumonia")
if (!(state %in% validStates)){
stop("invalid state")
}
if (!(outcome %in% validOutcomes)){
stop("invalid outcome")
}
# Return hospital name in that state with lowest
# 30-day death rate
# Define the correspondent mortality rate column
mortalityCol = mRatesCols[[outcome]]
stateData = data[data$State==state,]
# Idx from mRates NOT FROM THE WHOLE DATAFRAME
bestIdx = which.min(stateData[[mortalityCol]])
best = stateData$Hospital.Name[bestIdx]
best
source("best.R")
best("TX", "heart failure")
state = "TX"
outcome = "heart failure"
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,11]<-as.numeric(data[,11])
data[,17]<-as.numeric(data[,17])
data[,23]<-as.numeric(data[,23])
mRatesCols = list("heart attack"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia"="Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
# Check that state and outcome are valid
validStates = unique(data$State)
validOutcomes = c("heart attack", "heart failure", "pneumonia")
if (!(state %in% validStates)){
stop("invalid state")
}
if (!(outcome %in% validOutcomes)){
stop("invalid outcome")
}
mortalityCol = mRatesCols[[outcome]]
stateData = data[data$State==state,]
# Idx from mRates NOT FROM THE WHOLE DATAFRAME
bestIdx = which.min(stateData[[mortalityCol]])
best = stateData$Hospital.Name[bestIdx]
best
source("best.R")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
Error in best("NY", "hert attack") : invalid outcome
best("NY", "hert attack")
