n = length(id)
resDF = data.frame(id=numeric(n), nobs = numeric(n))
View(resDF)
View(resDF)
id[0]
id[1]
1:n
c(1:n)
a = 1:n
cnt = 1
fileID = sprintf("%03d", id[cnt])
fullpath = paste(directory,"/",fileID,".csv", sep="")
filedata = read.csv(fullpath)
nobs = sum(!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"]))
resDF["id"][cnt] = id[cnt]
resDF["nobs"][cnt] = nobs
cnt = 2
fileID = sprintf("%03d", id[cnt])
fullpath = paste(directory,"/",fileID,".csv", sep="")
filedata = read.csv(fullpath)
nobs = sum(!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"]))
resDF["id"][cnt] = id[cnt]
resDF["nobs"][cnt] = nobs
fileID = sprintf("%03d", id[cnt])
fullpath = paste(directory,"/",fileID,".csv", sep="")
filedata = read.csv(fullpath)
nobs = sum(!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"]))
resDF["id"][cnt] = id[cnt]
id[cnt]
resDF
id[cnt]
resDF$id
resDF$id[1] = 10
resDF
resDF[["id"]][cnt] = id[cnt]
resDF
source("complete.R")
complete("specdata", 1
)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
directory = "specdata"
source("complete.R")
completed = complete(directory)
completed = complete(directory)
toUse = completed["nobs"]>threshold
threshold = 3
toUse = completed["nobs"]>threshold
toUse
toUse = source["id"][completed["nobs"]>threshold]
toUse = source[["id"][completed["nobs"]>threshold]
toUse = source[[id][completed["nobs"]>threshold]
toUse = source$"id"[completed["nobs"]>threshold]
toUse = completed[["id"]][completed["nobs"]>threshold]
toUse
filenum = 1
file = sprintf("%03d", filenum)
fullpath = paste(directory,"/",file,".csv", sep="")
filedata = read.csv(fullpath)
filedata["nitrate"][!is.na(filedata["nitrate"])]
sulfate = c(sulfate, filedata["sulfate"][!is.na(filedata["sulfate"])])
nitrate = c(nitrate, filedata["nitrate"][!is.na(filedata["nitrate"])])
sulfate = numeric()
nitrate = numeric()
sulfate = c(sulfate, filedata["sulfate"][!is.na(filedata["sulfate"])])
nitrate = c(nitrate, filedata["nitrate"][!is.na(filedata["nitrate"])])
?cor
cor(sulfate,nitrate)
index = !is.na(filedata["sulfate"]) & !is.na(filedata["nitrate"])
filedata["sulfate"][index]
index = !is.na(filedata["sulfate"]) & !is.na(filedata["nitrate"])
sulfate = c(sulfate, filedata["sulfate"][index])
nitrate = c(nitrate, filedata["nitrate"][index])
cor(sulfate,nitrate)
sum(index)
sulfate = numeric()
nitrate = numeric()
index = !is.na(filedata["sulfate"]) & !is.na(filedata["nitrate"])
sulfate = c(sulfate, filedata["sulfate"][index])
nitrate = c(nitrate, filedata["nitrate"][index])
cor(sulfate,nitrate)
toUse
threshold = 1000000000
toUse = completed[["id"]][completed["nobs"]>threshold]
toUse
len(toUse)
length(toUse)
a = numeric()
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
corr("specdata",15'')
corr("specdata",150)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
directory = "specdata"
threshold = 150
corrs = numeric()
# Get the relevant files
#source("complete.R")
completed = complete(directory)
toUse = completed[["id"]][completed["nobs"]>threshold]
source("complete.R")
completed = complete(directory)
toUse = completed[["id"]][completed["nobs"]>threshold]
toUse
if(length(toUse)>0){
for(filenum in toUse){
# Read file
file = sprintf("%03d", filenum)
fullpath = paste(directory,"/",file,".csv", sep="")
filedata = read.csv(fullpath)
# Append the new data to the pollutant vectors
index = !is.na(filedata["sulfate"]) & !is.na(filedata["nitrate"])
sulfate = filedata["sulfate"][index]
nitrate = filedata["nitrate"][index]
# Return numeric vector of correlations
corrs = c(corrs,cor(sulfate,nitrate))
}
}
corrs
toUse
completed
completed["nobs"]>threshold
toUse = completed[["id"]][completed["nobs"]>threshold]
if(length(toUse)>0){
for(filenum in toUse){
# Read file
file = sprintf("%03d", filenum)
fullpath = paste(directory,"/",file,".csv", sep="")
filedata = read.csv(fullpath)
# Append the new data to the pollutant vectors
index = !is.na(filedata["sulfate"]) & !is.na(filedata["nitrate"])
sulfate = filedata["sulfate"][index]
nitrate = filedata["nitrate"][index]
# Return numeric vector of correlations
corrs = c(corrs,cor(sulfate,nitrate))
}
}
corrs
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
directory = "specdata"
id=1:10
n = length(id)
resDF = data.frame(id=numeric(n), nobs = numeric(n))
View(resDF)
View(resDF)
for(c in 1:n){print c}
for(c in 1:n){c}
for(c in 1:n){print(c)}
cnt = 1
fileID = sprintf("%03d", id[cnt])
fullpath = paste(directory,"/",fileID,".csv", sep="")
filedata = read.csv(fullpath)
!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"])
View(filedata)
View(filedata)
!is.na(filedata["sulfate"]
)
!is.na(filedata["nitrate"])
id[cnt]
id[2]
fileID = sprintf("%03d", id[cnt])
fullpath = paste(directory,"/",fileID,".csv", sep="")
filedata = read.csv(fullpath)
nobs = sum(!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"]))
resDF[["id"]][cnt] = id[cnt]
resDF[["nobs"]][cnt] = nobs
fileID
cnt = 2
fileID = sprintf("%03d", id[cnt])
fullpath = paste(directory,"/",fileID,".csv", sep="")
filedata = read.csv(fullpath)
nobs = sum(!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"]))
resDF[["id"]][cnt] = id[cnt]
resDF[["nobs"]][cnt] = nobs
fileId
fileID
nobs
id[cnt]
resDF
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
id = 28
n = length(id)
resDF = data.frame(id=numeric(n), nobs = numeric(n))
n
cnt = 1:n
cnt
fileID = sprintf("%03d", id[cnt])
fullpath = paste(directory,"/",fileID,".csv", sep="")
filedata = read.csv(fullpath)
nobs = sum(!is.na(filedata["sulfate"]) & !is.na(filedata["sulfate"]))
source("complete.R")
complete("specdata", 1)
complete("specdata", 30:25)
submit
submit()
source("submitscript1.R")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
install.packages("swirl"
)
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
mySqrt<-sqrt(z-1)
mySqrt
myDiv<-z/mySqrt
myDiv
c(1,2,3)+c(0,10)
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
swirl()
1:20
pi:10
15:1
?´:
?´:´
?`:`
seq(1:20)
seq(1,20)
seq(0,10,by=0,5)
seq(0,10,by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2), each=10)
cd
setwd("C:/workspace/R/rprog_data_ProgAssignment3-data")
outcome = read.csv("outcome-of-care-measures.csv" colClasses = "character")
outcome = read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[,11]<-as.numeric(outcome[,11])
outcome[0]
outcome[1]
outcome[0]
ncol(outcome)
outcome[46]
outcome[1:10,7]
unique(outcome[,7])
validStates = unique(outcome[,7])
"AL" in validStates
"AL" %in% validStates
?paste
paste("a","b", sep=", ")
?gsub
print  paste("Error in best (",state,", ",outcome,")")
state = "AK"
outcome "blabla"
outcome =  "blabla"
print  paste("Error in best (",state,", ",outcome,")")
print  paste("Error in best (",state,", ",outcome,")", sep ="")
paste("Error in best (",state,", ",outcome,")", sep ="")
res= paste("Error in best (",state,", ",outcome,")", sep ="")
print res
res
validOutcomes = c("heart attack", "heart failure", "pneumonia")
"heart attack" %in% validOutcomes
state = "TX"
outcome = "heart attack"
if state !%in% validStates{
print ( paste("Error in best (",state,", ",outcome,"): invalid state") )
}
if outcome !%in% validOutcomes{
print ( paste("Error in best (",state,", ",outcome,"): invalid outcome") )
}
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,11]<-as.numeric(data[,11])
# Check that state and outcome are valid
validStates = unique(data[,7])
validOutcomes = c("heart attack", "heart failure", "pneumonia")
if state !%in% validOutcomes{
print ( paste("Error in best (",state,", ",outcome,"): invalid state") )
}
if outcome !%in% validOutcomes{
print ( paste("Error in best (",state,", ",outcome,"): invalid outcome") )
}
outcome %in% validOutcomes
outcome !%in% validOutcomes
if !(state %in% validOutcomes){
print ( paste("Error in best (",state,", ",outcome,"): invalid state") )
}
if !(outcome %in% validOutcomes){
print ( paste("Error in best (",state,", ",outcome,"): invalid outcome") )
}
!(state %in% validOutcomes)
!(outcome %in% validOutcomes)
if !(state %in% validStates){
print ( paste("Error in best (",state,", ",outcome,"): invalid state") )
}
if (!(state %in% validStates)){
print ( paste("Error in best (",state,", ",outcome,"): invalid state") )
}
if (!(state %in% validStates)){
print ( paste("Error in best (",state,", ",outcome,"): invalid state") )
}
if (!(outcome %in% validOutcomes)){
print ( paste("Error in best (",state,", ",outcome,"): invalid outcome") )
}
?stop
outcomesIdx = list("heart attack"=11, "heart failure"=17, "pneumonia"=23)
outcomesIdx
outcome
outcomesIdx$outcome
outcomesIdx[[outcome]]
data[,outcomesIdx[[outcome]]]
mRates = data[,outcomesIdx[[outcome]]]
min(mRates)
?min
min(mRates, na.rm=T)
?which
?which.mean
?which.mim
?which.min
which.min(mRates)
min(mRates)
min(mRates, na.rm=T)
mRates[2850]
best = data[bestIdx,2]
bestIdx = which.min(mRates)
best = data[bestIdx,2]
best
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
state = "TX"
outcome = "heart attack!"
outcome = "heart attack"
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,11]<-as.numeric(data[,11])
data[,17]<-as.numeric(data[,17])
data[,23]<-as.numeric(data[,23])
validStates = unique(data[,7])
validOutcomes = c("heart attack", "heart failure", "pneumonia")
if (!(state %in% validStates)){
stop("invalid state")
}
if (!(outcome %in% validOutcomes)){
stop("invalid outcome")
}
mRatesCols = list("heart attack"=11, "heart failure"=17, "pneumonia"=23)
mRates = data[,mRatesCols[[outcome]]]
bestIdx = which.min(mRates)
best = data[bestIdx,2]
best
source("best.R")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
state
outcome
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
invisible(data[,11]<-as.numeric(data[,11]))
invisible(data[,17]<-as.numeric(data[,17]))
invisible(data[,23]<-as.numeric(data[,23]))
data[,7]==state
data[,7]==state
source("best.R")
best("TX", "heart attack")
mRates = data[data[,7]==state, mRatesCols[[outcome]]]
mRates
bestIdx
length(mRates)
mRatesCols[[outcome]]
data[data[,7]==state, mRatesCols[[outcome]]]
source("best.R")
best("TX", "heart failure")
best("MD", "heart attack")
data = read.csv("outcome-of-care-measures.csv")
View(data)
View(data)
View(data)
data[,7]==state
state = "TX"
data[,7]==state
data[data[,7]==state, mRatesCols[[outcome]]]
outcome = "heart attack"
data = read.csv("outcome-of-care-measures.csv"), colClasses = "character")
#data[,11]<-as.numeric(data[,11])
#data[,17]<-as.numeric(data[,17])
#data[,23]<-as.numeric(data[,23])
# Check that state and outcome are valid
validStates = unique(data[,7])
validOutcomes = c("heart attack", "heart failure", "pneumonia")
if (!(state %in% validStates)){
stop("invalid state")
}
if (!(outcome %in% validOutcomes)){
stop("invalid outcome")
}
mRatesCols = list("heart attack"=11, "heart failure"=17, "pneumonia"=23)
mRatesCols[[outcome]]
outcome = "pneumonia"
mRatesCols[[outcome]]
outcome = "heart attack"
data[data[,7]==state, mRatesCols[[outcome]]]
bestIdx = which.min(mRates)
mRates = data[data[,7]==state, mRatesCols[[outcome]]]
bestIdx = which.min(mRates)
bestIdx
best = data[bestIdx,2]
best
source("best.R")
best("TX", "heart attack")
source("best.R")
source("best.R")
best("TX", "heart attack")
data[,2]==CYPRESS FAIRBANKS MEDICAL CENTER"
data[,2]=="CYPRESS FAIRBANKS MEDICAL CENTER"
data[,2]=="CYPRESS FAIRBANKS MEDICAL CENTER"
data[,2]
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,11]<-as.numeric(data[,11])
data[,17]<-as.numeric(data[,17])
data[,23]<-as.numeric(data[,23])
data[,2]
data[,2]=="CYPRESS FAIRBANKS MEDICAL CENTER"
data[data[,2]=="CYPRESS FAIRBANKS MEDICAL CENTER",]
data.State
data$State
colnames(data)
mRates = data$mRatesCols[[outcome]][data$State==state]
state = "TX"
outcome = "heart attack"
data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
data[,11]<-as.numeric(data[,11])
data[,17]<-as.numeric(data[,17])
data[,23]<-as.numeric(data[,23])
# Check that state and outcome are valid
validStates = unique(data$State)
validOutcomes = c("heart attack", "heart failure", "pneumonia")
if (!(state %in% validStates)){
stop("invalid state")
}
if (!(outcome %in% validOutcomes)){
stop("invalid outcome")
}
mRatesCols = list("heart attack"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack",
"heart failure"="Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure",
"pneumonia"="Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
mRates = data$mRatesCols[[outcome]][data$State==state]
mRates
data[mRatesCols[[outcome]]]
data[mRatesCols[[outcome]]][data$State==state]
data[data$State==state][mRatesCols[[outcome]]]
data[data$State==state]
mRatesCols[[outcome]]
data[[mRatesCols[[outcome]]]]
data[[mRatesCols[[outcome]]]][data$State==state]
bestIdx = which.min(mRates)
bestIdx
bestIdx
mRates = data[[mRatesCols[[outcome]]]][data$State==state]
bestIdx = which.min(mRates)
bestIdx
mRates[210]
best = data$Name[bestIdx]
best
bestIdx
best = data$Hospital.Name[bestIdx]
data[data$Hospital.Name=="CYPRESS FAIRBANKS MEDICAL CENTER"]
data[data$Hospital.Name=="CYPRESS FAIRBANKS MEDICAL CENTER",]
